* ravl
A fast, lightweight, persistent AVL tree implementation written typescript.

** Installation

#+begin_src bash
npm install ravl
#+end_src

** Usage
*** Create a tree

#+begin_src javascript
const {Tree} = require('ravl');
let a = new Tree();
#+end_src

*** Use a custom comparator

#+begin_src javascript
function compare({key: a}, {key: b}) {
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
}

let a = new Tree({compare})
#+end_src

*** Insert elements
#+begin_src javascript
a = a.add({key: 'a', value: 1});
a = a.add({key: 'b', value: 2});
#+end_src

*** Test membership, retrieve values
#+begin_src javascript
a.has({key: 'b'}) // {key: 'a', value: 2}
a.has({key: 'c'}) // false
#+end_src

*** Remove an item
#+begin_src javascript
a = a.remove({key: 'b'});
#+end_src

*** Take an item
#+begin_src javascript
let [{value}, newA] = a.take({key: 'c'});
#+end_src
** TODO
*** More APIs
*** More documentation
*** Tests
** Contributing
*** PRs welcome
*** README.md
Write in the org file. Export to markdown.
